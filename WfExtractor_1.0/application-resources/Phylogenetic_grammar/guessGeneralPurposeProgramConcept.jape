Phase:guessGeneralPurposeProgramConcept
Input: Token Sentence GeneralPurposePackagesProgram
Options: control = all debug = true

Rule: IsItSequenceAlignmentProgram
Priority: 99
(
 {Sentence}
)
:isItSequenceAlignmentProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItSequenceAlignmentProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         String guessedConcept="?";
         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();
         AnnotationSet nearestTokensAsBefore = inputAS.get("Token").getContained(genaStart-70,genaStart);

         for(Annotation a : nearestTokensAsBefore){
            if (a.getStartNode().getOffset()>sentStart) {
               if(org.apache.commons.lang.StringUtils.substring(a.getFeatures().get("category").toString(),0,2).equals("VB")) {
                  verbsRootsText=verbsRootsText+"-"+a.getFeatures().get("root");
               }
            }
         }

         try{
            if (verbsRootsText.toLowerCase().contains("align")) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: SequenceAlignmentProgram.");
               // System.out.print("Context (-70): ");
               // for(Annotation a : nearestTokensAsBefore){
               //    System.out.print(a.getFeatures().get("string"));
               //    System.out.print(" ");
               // }
               // System.out.println("\n------------------------------------");
               // -------------------------------

               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","true");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
            
         }catch(Exception e){}
         
      }
}

Rule: IsItTreeVisualizationProgram
Priority: 99
(
 {Sentence}
)
:isItTreeVisualizationProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItTreeVisualizationProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){
         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();
         AnnotationSet nearestTokensAsBefore = inputAS.get("Token").getContained(genaStart-70,genaStart);

         for(Annotation a : nearestTokensAsBefore){
            if (a.getStartNode().getOffset()>sentStart) {
               if(org.apache.commons.lang.StringUtils.substring(a.getFeatures().get("category").toString(),0,2).equals("VB")) {
                  verbsRootsText=verbsRootsText+"-"+a.getFeatures().get("root");
               }
            }
         }

         try{ if (verbsRootsText.toLowerCase().contains("visualize") || verbsRootsText.toLowerCase().contains("view")) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: TreeVisualizationProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.print("Context (-70): ");
               // for(Annotation a : nearestTokensAsBefore){
               //    System.out.print(a.getFeatures().get("string"));
               //    System.out.print(" ");
               // }
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","true");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}
      }
}

Rule: IsItPhylogeneticInferenceProgram
Priority: 99
(
 {Sentence}
)
:isItPhylogeneticInferenceProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItPhylogeneticInferenceProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();
         // System.out.println("------------------------------------");
         // System.out.println(doc.getName());  
         // System.out.println("------------------------------------");
         // System.out.println("sentenceText "+sentenceText);

         try{ if (sentenceText.toLowerCase().contains("reconstructed-tree") || sentenceText.toLowerCase().contains("phylogenetic-analys") ||
                  sentenceText.toLowerCase().contains("phylogenetic-inferen") || sentenceText.toLowerCase().contains("phylogenetic-tree")) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: PhylogeneticInferenceProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","true");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}
      }
}

Rule: IsItHypothesisValidationProgram
Priority: 99
(
 {Sentence}
)
:isItHypothesisValidationProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItHypothesisValidationProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      AnnotationSet rel = inputAS.get("BootstrapsParms", sentStart, sentEnd);
      Boolean ve=rel.toString()=="[]";
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsTextBefore="";
      String verbsRootsTextAfter="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();
         AnnotationSet nearestTokensAsBefore = inputAS.get("Token").getContained(genaStart-70,genaStart);
         AnnotationSet nearestTokensAsAfter = inputAS.get("Token").getContained(genaStart,genaEnd+70);

         for(Annotation a : nearestTokensAsBefore){
            if (a.getStartNode().getOffset()>sentStart) {
               if(org.apache.commons.lang.StringUtils.substring(a.getFeatures().get("category").toString(),0,2).equals("VB")) {
                  verbsRootsTextBefore=verbsRootsTextBefore+"-"+a.getFeatures().get("root");
               }
            }
         }
         for(Annotation a : nearestTokensAsAfter){
            if (a.getStartNode().getOffset()>sentEnd) {
               if(org.apache.commons.lang.StringUtils.substring(a.getFeatures().get("category").toString(),0,2).equals("VB")) {
                  verbsRootsTextAfter=verbsRootsTextAfter+"-"+a.getFeatures().get("root");
               }
            }
         }
         
         Boolean classVe = false;
         if (ve==false){
//          	System.out.println(rel);
         	Annotation veann = rel.get("BootstrapsParms").iterator().next();
         	Long veStart = veann.getStartNode().getOffset();
      		Long veEnd = veann.getEndNode().getOffset();
         	if (veStart>=sentStart && veEnd<=sentEnd)
         		classVe = true;
         	else classVe = false;
         }

         try{  if (  sentenceText.toLowerCase().contains("bootstrap") || sentenceText.toLowerCase().contains("topology") ||
               sentenceText.toLowerCase().contains("hypothesis") ||
               verbsRootsTextBefore.toLowerCase().contains("valid") || verbsRootsTextBefore.toLowerCase().contains("test") ||
               verbsRootsTextAfter.toLowerCase().contains("valid") || verbsRootsTextAfter.toLowerCase().contains("test") ||
               classVe == true) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: HypothesisValidationProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","true");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}   
      }
}

Rule: IsItDataCollectionProgram
Priority: 99
(
 {Sentence}
)
:isItDataCollectionProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItDataCollectionProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();

         try{  if (  sentenceText.toLowerCase().contains("data management") || sentenceText.toLowerCase().contains("convert") ||
               sentenceText.toLowerCase().contains("simulat")) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: DataCollectionProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","true");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}  
      }
}

Rule: IsItTreeAnalysisProgram
Priority: 99
(
 {Sentence}
)
:isItTreeAnalysisProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItTreeAnalysisProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();

         try{  if (  sentenceText.toLowerCase().contains("prediction of data") || sentenceText.toLowerCase().contains("description of data") ||
               sentenceText.toLowerCase().contains("prediction of tree") || sentenceText.toLowerCase().contains("description of tree") ||
               sentenceText.toLowerCase().contains("tree analysis") || sentenceText.toLowerCase().contains("biogeographic") ||
               sentenceText.toLowerCase().contains("clocks") || sentenceText.toLowerCase().contains("dating") || 
               sentenceText.toLowerCase().contains("stratigraphy") || sentenceText.toLowerCase().contains("comparative method") ||
               sentenceText.toLowerCase().contains("hybridization") || sentenceText.toLowerCase().contains("recombination") ) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: TreeAnalysisProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","false");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","true");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}           
      }
}
Rule: IsItModelProgram
Priority: 99
(
 {Sentence}
)
:isItModelProgram
-->
{
   //AnnotationSet matchedAnns = bindings.get("guessAmbgGeneralPurposePackagesProgram");
   // Get the sentence
      Annotation sent = ((AnnotationSet)bindings.get("isItModelProgram")).iterator().next();
      Long sentStart = sent.getStartNode().getOffset();
      Long sentEnd = sent.getEndNode().getOffset();

      AnnotationSet tokens = inputAS.get("Token", sentStart, sentEnd);
      AnnotationSet generalPurposePackagesProgram = inputAS.get("GeneralPurposePackagesProgram", sentStart, sentEnd);
      AnnotationSet rel1 = inputAS.get("Models", sentStart, sentEnd);
      Boolean ve1=rel1.toString()=="[]";
      
      List<Annotation> orderedToks = gate.Utils.inDocumentOrder(tokens);
      String sentenceText="";
      String verbsRootsText="";


      // 1.Get the sentence
      for(Annotation a : orderedToks){
         sentenceText=sentenceText+"-"+a.getFeatures().get("string");
      }
      
      // 2. Search for tips in the sentence/nearestTokensAsBefore(~70)/nearestTokensAsAfter(~70)
      for(Annotation gena : generalPurposePackagesProgram){

         Long genaStart = gena.getStartNode().getOffset();
         Long genaEnd = gena.getEndNode().getOffset();
         AnnotationSet nearestTokensAsBefore = inputAS.get("Token").getContained(genaStart-70,genaStart);

         for(Annotation a : nearestTokensAsBefore){
            if (a.getStartNode().getOffset()>sentStart) {
               if(org.apache.commons.lang.StringUtils.substring(a.getFeatures().get("category").toString(),0,2).equals("VB")) {
                  verbsRootsText=verbsRootsText+"-"+a.getFeatures().get("root");
               }
            }
         }
         
		 Boolean classVe1 = false;
         if (ve1==false){
         	Annotation veann1 = rel1.get("Models").iterator().next();
         	Long veStart1 = veann1.getStartNode().getOffset();
      		Long veEnd1 = veann1.getEndNode().getOffset();
         	if (veStart1>=sentStart && veEnd1<=sentEnd)
         		classVe1 = true;
         	else classVe1 = false;
         }
         
         try{ if (  verbsRootsText.toLowerCase().contains("model") || sentenceText.toLowerCase().contains("gene-duplication") ||
               sentenceText.toLowerCase().contains("model selection") || classVe1 == true) {
               // ------- DISPLAY RESULTS -------
               // System.out.println("------------------------------------");
               // System.out.println(doc.getName());
               // System.out.println("------------------------------------");
               // System.out.println("GeneralPurposePackagesProgram: "+gena.getFeatures().get("lookupString"));
               // System.out.println("Guessed Concept is: ModelProgram.");
               // System.out.print("sentenceText "+sentenceText);
               // System.out.print("Context (-70): ");
               // for(Annotation a : nearestTokensAsBefore){
               //    System.out.print(a.getFeatures().get("string"));
               //    System.out.print(" ");
               // }
               // System.out.println("\n------------------------------------");
               // -------------------------------
               // ------- CREATE A NEW ANNOTATION -------
               gate.FeatureMap fm = gate.Factory.newFeatureMap();
               fm.put("class-DataCollectionProgram","false");
               fm.put("class-SequenceAlignmentProgram","false");
               fm.put("class-ModelProgram","true");
               fm.put("class-PhylogeneticInferenceProgram","false");
               fm.put("class-HypothesisValidationProgram","false");
               fm.put("class-TreeAnalysisProgram","false");
               fm.put("class-TreeVisualizationProgram","false");
               fm.put("lookupString",gena.getFeatures().get("lookupString"));
               fm.put("inst",gena.getFeatures().get("inst").toString().split("#")[1]);
               outputAS.add(genaStart, genaEnd, "GuessedGeneralPackagesCategories", fm);
               // -------------------------------
            }
         }catch(Exception e){}
      }
}

Rule: IsItPhylogeneticInferenceProgramOtherwise
Priority: 10
(
 {GeneralPurposePackagesProgram}
)
:generalPurposePackagesProgram
-->
{
   AnnotationSet matchedAnns = bindings.get("generalPurposePackagesProgram");
   Annotation p = matchedAnns.get("GeneralPurposePackagesProgram").iterator().next();

   gate.FeatureMap fm = gate.Factory.newFeatureMap();
   fm.put("class-DataCollectionProgram","false");
   fm.put("class-SequenceAlignmentProgram","false");
   fm.put("class-ModelProgram","false");
   fm.put("class-PhylogeneticInferenceProgram","true");
   fm.put("class-HypothesisValidationProgram","false");
   fm.put("class-TreeAnalysisProgram","false");
   fm.put("class-TreeVisualizationProgram","false");
   fm.put("lookupString",p.getFeatures().get("lookupString"));
   fm.put("inst",p.getFeatures().get("inst").toString().split("#")[1]);
   outputAS.add(matchedAnns.firstNode(), matchedAnns.lastNode(), "GuessedGeneralPackagesCategories", fm);
}