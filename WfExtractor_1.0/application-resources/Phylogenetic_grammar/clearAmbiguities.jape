Phase:clearambiguities
Input: Lookup AnnieLookup Token GeneOntology Stop
Options: control = all

// =====================================================================================
// ========================GENERAL RULES FOR GENERAL CONCEPTS===========================
// =====================================================================================

// --(length)--
// removeAmbgLength: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: StopWords1
(
 {GeneOntology,Stop}

)
:stopWords1
-->
{
	AnnotationSet matchedAnns = bindings.get("stopWords1");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A Gene Ontology instance is removed from the stop list: "+ann1.getFeatures().get("lookupstring")) ;
}

// --(length)--
// removeAmbgLength: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: StopWords2
(
 {GeneOntology}

)
:stopWords2
-->
{
	AnnotationSet matchedAnns = bindings.get("stopWords2");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();
	
	java.util.ArrayList tokens = new java.util.ArrayList(matchedAnns);
    Collections.sort(tokens, new gate.util.OffsetComparator());
    AnnotationSet commentTokensAs = inputAS.get("Token").getContained(
        matchedAnns.firstNode().getOffset(),
        matchedAnns.lastNode().getOffset());
    
    String text ="" ;
    for(Annotation commentTokenAnn : commentTokensAs) {
        //System.out.println(commentTokenAnn.getFeatures().get("string")) ;
        if (!text.isEmpty())
            text = text+" "+commentTokenAnn.getFeatures().get("string").toString();
        else text = commentTokenAnn.getFeatures().get("string").toString();
    }

    if ( text.matches("\\d+") ) {
    	inputAS.remove(ann1);
		// System.out.println("A numeric GO term is deleted: "+text) ;
    }
}

// --(length)--
// removeAmbgLength: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: RemoveAmbgLength1
(
 {GeneOntology, Token.length<3 }

)
:removeAmbgLength1
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgLength1");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();
	Annotation ann2 = matchedAnns.get("Token").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A too short term name is detected (<3 (genes-proteins) chars <2 (others)).") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

// --(length)--
// removeAmbgLength: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: RemoveAmbgGOLookup
(
 {GeneOntology, Lookup, AnnieLookup}
 |
 {GeneOntology, Lookup}

)
:removeAmbgGOLookup
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgGOLookup");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();
	Annotation ann2 = matchedAnns.get("Lookup").iterator().next();
	inputAS.remove(ann1);
	inputAS.remove(ann2);
	// System.out.println("A gene ontology tem which is an ANNIE or Lookup term as the same time") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

// --(length)--
// removeAmbgLength: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: RemoveAmbgLength2
(
 {Lookup.class =~ "co-ode.org/ontologies/ont.owl", Token.length<2 }

)
:removeAmbgLength2
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgLength2");
	Annotation ann1 = matchedAnns.get("Lookup").iterator().next();
	Annotation ann2 = matchedAnns.get("Token").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A too short term name is detected (<3 (genes-proteins) chars <2 (others)).") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

// --(Gene or Protein)--
// RemoveAmbgGO: removes suspucious gene names having a cardinality, adjective or Preposition as a POS
Rule: RemoveAmbgGO
(
 {GeneOntology, Token.category=="IN "}
 |
 {GeneOntology, Token.category=="CD"}
 |
 {GeneOntology, Token.category=="JJ"}
 |
 {GeneOntology, Token.category=="JJR"}
 |
 {GeneOntology, Token.category=="JJS"}
 |
 {GeneOntology, Token.category=="VBD"}
 |
 {GeneOntology, Token.category=="VBN"}
 |
 {GeneOntology, Token.category=="RP"}
 |
 {GeneOntology, Token.category=="RB"}
 |
 {GeneOntology, Token.category=="PRP$"}
 |
 {GeneOntology, Token.category=="DT"}
)
:removeAmbgGO
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgGO");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();
	Annotation ann2 = matchedAnns.get("Token").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A suspicious gene or protein name is removed do its POS tag in (IN | CD | JJ | JJR | JJS etc.)") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

// RemoveAmbgGONoun: removes codon term as Noun(s)
Rule: RemoveAmbgLookupNoun
(
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="NN"}
 |
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="NNP"}
 |
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="NNPS"}
 |
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="VBD"}
 |
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="VB"}
 |
 {Lookup.class =~ "co-ode.org/ontologies", Token.category=="VBN"}
)
:removeAmbgLookupNoun
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgLookupNoun");
	Annotation ann1 = matchedAnns.get("Lookup").iterator().next();

	java.util.ArrayList tokens = new java.util.ArrayList(matchedAnns);
    Collections.sort(tokens, new gate.util.OffsetComparator());
    AnnotationSet commentTokensAs = inputAS.get("Token").getContained(
        matchedAnns.firstNode().getOffset(),
        matchedAnns.lastNode().getOffset());
    String text ="" ;
    
    for(Annotation commentTokenAnn : commentTokensAs) {
        //System.out.println(commentTokenAnn.getFeatures().get("string")) ;
        if (!text.isEmpty())
            text += " "+commentTokenAnn.getFeatures().get("string");
        else text += commentTokenAnn.getFeatures().get("string");    
    }
    // System.out.println(text);
    
    if ( text.matches(".*[ACGTU]{3}.*") ) {
    	inputAS.remove(ann1);
		// System.out.println("An ambigious codon term is deleted: "+text) ;
    }
}

// RemoveAmbgGONoun: removes codon term as Noun(s)
Rule: RemoveAmbgGONoun
(
 {GeneOntology, Token.category=="NN"}
 |
 {GeneOntology, Token.category=="NNP"}
)
:removeAmbgGONoun
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgGONoun");
	Annotation ann1 = matchedAnns.get("GeneOntology").iterator().next();

	java.util.ArrayList tokens = new java.util.ArrayList(matchedAnns);
    Collections.sort(tokens, new gate.util.OffsetComparator());
    AnnotationSet commentTokensAs = inputAS.get("Token").getContained(
        matchedAnns.firstNode().getOffset(),
        matchedAnns.lastNode().getOffset());
    String text ="" ;
    
    for(Annotation commentTokenAnn : commentTokensAs) {
        //System.out.println(commentTokenAnn.getFeatures().get("string")) ;
        if (!text.isEmpty())
            text += " "+commentTokenAnn.getFeatures().get("string");
        else text += commentTokenAnn.getFeatures().get("string");    
    }
    // System.out.println(text);
    
    if ( text.matches(".*[ACGTU]{3}.*") ) {
    	inputAS.remove(ann1);
		// System.out.println("An ambigious codon term is deleted: "+text) ;
    }
}

// --(Taxon)--
// RemoveAmbgGO: removes suspucious gene or protein names having a cardinality, adjective or Preposition as a POS
Rule: RemoveAmbgGO
(
 {Lookup.inst =~ "taxonomyID_", Token.category=="IN "}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="CD"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="JJ"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="JJR"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="JJS"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="VBD"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="VB"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="VBN"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="RP"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="RB"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="PRP$"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="DT"}
 |
 {Lookup.inst =~ "taxonomyID_", Token.category=="PDT"}
)
:removeAmbgGO
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgGO");
	Annotation ann1 = matchedAnns.get("Lookup").iterator().next();
	Annotation ann2 = matchedAnns.get("Token").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A suspicious organism name is removed do its POS tag in (IN | CD | JJ | JJR | JJS etc.)") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

// ==================
// Programs
// ==================

// --(Programs)--
// RemoveAmbgprograms0: removes suspucious program names having a noun or verb as a POS written in miniscule
Rule: RemoveAmbgprograms0
(
 {Lookup.inst =~ "programID_", Token.category=="VBD", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="VB", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="VBN", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="NN", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="NNP", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="NNPS$", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="JJ", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="JJS", Token.orth=="lowercase"}
 |
 {Lookup.inst =~ "programID_", Token.category=="JJR$", Token.orth=="lowercase"}
)
:removeAmbgprograms0
-->
{
	AnnotationSet matchedAnns = bindings.get("removeAmbgprograms0");
	Annotation ann1 = matchedAnns.get("Lookup").iterator().next();
	Annotation ann2 = matchedAnns.get("Token").iterator().next();
	inputAS.remove(ann1);
	// System.out.println("A suspicious program is removed do its POS tag in (Verb| Noun)") ;
	// System.out.println(ann2.getFeatures().get("string"));
}

