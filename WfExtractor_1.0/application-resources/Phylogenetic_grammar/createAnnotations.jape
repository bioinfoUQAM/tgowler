Phase:createAnnotations
Input: Lookup Token GeneOntology Sentence
Options: control = all

Rule: Lookup(
{Lookup}
):match
-->
{
    AnnotationSet matchedAnns = bindings.get("match");
    Annotation ann = matchedAnns.get("Lookup").iterator().next(); 
    // System.out.println(ann) ; 
    FeatureMap theFeatures = ann.getFeatures();

    java.util.ArrayList tokens = new java.util.ArrayList(matchedAnns);
    Collections.sort(tokens, new gate.util.OffsetComparator());
    AnnotationSet commentTokensAs = inputAS.get("Token").getContained(
        matchedAnns.firstNode().getOffset(),
        matchedAnns.lastNode().getOffset());
    
    String text = "";

	Long o1Start = ann.getStartNode().getOffset();
    Long o1End = ann.getEndNode().getOffset();
    AnnotationSet toks = inputAS.get("Token", o1Start, o1End);
    List<Annotation> orderedToks = gate.Utils.inDocumentOrder(toks);
    for(Annotation a : orderedToks)
    	text=text+a.getFeatures().get("string")+" ";

    FeatureMap pojemFeatures = ann.getFeatures();
    gate.FeatureMap features = Factory.newFeatureMap();
    features.putAll(pojemFeatures);
    features.put("lookupId", ann.getId());
    features.put("lookupString", text.substring(0, text.length()-1));

    
    String s = theFeatures.get("class").toString();
    if (s.split("#").length>1 && s.toLowerCase().contains("co-ode.org/ontologies/")) {
        String[] split = s.split("#");
        String cl = split[1];

        // System.out.println(cl);
        // System.out.println(features.get("lookupString"));

        if(!text.isEmpty()){ 
            Integer id = outputAS.add(matchedAnns.firstNode(), matchedAnns.lastNode(), cl, features);  
        }
    }
}

Rule: GeneOntologyAnnotation(
{GeneOntology}
):geneOntology
-->
{
    AnnotationSet matchedAnns = bindings.get("geneOntology");
    Annotation ann = matchedAnns.get("GeneOntology").iterator().next(); 
    // System.out.println(ann) ; 
    FeatureMap theFeatures = ann.getFeatures();

    java.util.ArrayList tokens = new java.util.ArrayList(matchedAnns);
    Collections.sort(tokens, new gate.util.OffsetComparator());
    AnnotationSet commentTokensAs = inputAS.get("Token").getContained(
        matchedAnns.firstNode().getOffset(),
        matchedAnns.lastNode().getOffset());
    
    String text = "";
	Long o1Start = ann.getStartNode().getOffset();
    Long o1End = ann.getEndNode().getOffset();
    AnnotationSet toks = inputAS.get("Token", o1Start, o1End);
    List<Annotation> orderedToks = gate.Utils.inDocumentOrder(toks);
    for(Annotation a : orderedToks)
    	text=text+a.getFeatures().get("string")+" ";

    FeatureMap pojemFeatures = ann.getFeatures();
    gate.FeatureMap features = Factory.newFeatureMap();
    // features.putAll(pojemFeatures);
    features.put("goid", theFeatures.get("majorType").toString());
    features.put("gene or protein", theFeatures.get("language").toString());
    features.put("lookupId", ann.getId());
    features.put("lookupString", text.substring(0, text.length()-1));
    
//     System.out.println(features.get("lookupString"));

    String cl = theFeatures.get("minorType").toString();

    if(!text.isEmpty()){ 
        Integer id = outputAS.add(matchedAnns.firstNode(), matchedAnns.lastNode(), cl, features);
    }    
}